datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String            @id @default(cuid())
  name          String?
  email         String?           @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  games         Game[]
  achievements  UserAchievement[]
  highScore     Int               @default(0)
  totalGames    Int               @default(0)
  totalHints    Int               @default(0)
  averageTime   Float             @default(0)

  posts     Post[]
  likes     Like[]
  comments  Comment[]
  following Follow[]  @relation("Following")
  followers Follow[]  @relation("Followers")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Game {
  id              String   @id @default(cuid())
  userId          String
  score           Int
  challengesCount Int
  hintsUsed       Int
  timeSpent       Int // in seconds
  difficulty      String // 'Easy', 'Medium', 'Hard'
  completedAt     DateTime @default(now())

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post? // Add this relation

  @@index([userId, score])
}

model Achievement {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  icon        String // Icon path or emoji
  category    String // e.g., 'Score', 'Speed', 'Consistency'
  condition   String // JSON string of conditions
  points      Int
  createdAt   DateTime @default(now())

  users UserAchievement[]
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Post {
  id        String   @id @default(cuid())
  userId    String
  gameId    String   @unique
  content   String   @db.Text
  createdAt DateTime @default(now())

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  game     Game      @relation(fields: [gameId], references: [id])
  likes    Like[]
  comments Comment[]
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  content   String   @db.Text
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}
